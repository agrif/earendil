{
    "$schema": "http://json-schema.org/schema#",

    "$comment": "we are strict with additionalProperties: false",

    "type": "object",
    "additionalProperties": false,
    "required": ["major-version", "minor-version", "sections", "messages"],
    "properties": {
        "major-version": {"type": "integer", "minimum": 0},
        "minor-version": {"type": "integer", "minimum": 0},

        "sections": {
            "type": "array",
            "minItems": 1,
            "items": {
                "type": "object",
                "additionalProperties": false,
                "required": ["title", "name"],
                "properties": {
                    "title": {"type": "string"},
                    "name": {"$ref": "#/definitions/name"}
                }
            }
        },

        "messages": {
            "type": "array",
            "minItems": 1,
            "items": {
                "type": "object",
                "additionalProperties": false,
                "required": ["name", "verb", "type", "arguments",
                             "associativity", "format", "section"],
                "properties": {
                    "name": {"$ref": "#/definitions/name"},
                    "related": {
                        "type": "array",
                        "items": {"$ref": "#/definitions/name"}
                    },
                    "documentation": {
                        "type": "string",
                        "contentMediaType": "text/markdown"
                    },
                    "type": {"enum": ["text", "numeric"]},
                    "verb": {"type": ["string", "integer"]},
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$comment": "it's an argument, with required name",
                            "allOf": [
                                {"$ref": "#/definitions/argument"},
                                {
                                    "if": {
                                        "properties": {
                                            "type": {"const": "literal"}
                                        }
                                    },
                                    "then": {},
                                    "else": {
                                        "type": "object",
                                        "required": ["name"]
                                    }
                                }
                            ]
                        }
                    },
                    "associativity": {"enum": ["left", "right"]},
                    "format": {"type": "string"},
                    "section": {"$ref": "#/definitions/name"}
                },
                "$comment": "we decide the type of verb here, based on type",
                "allOf": [
                    {
                        "if": {
                            "properties": {"type": {"const": "text"}}
                        },
                        "then": {
                            "properties": {"verb": {
                                "type": "string",
                                "pattern": "^[A-Z]+$"
                            }}
                        }
                    },
                    {
                        "if": {
                            "properties": {"type": {"const": "numeric"}}
                        },
                        "then": {
                            "properties": {"verb": {
                                "type": "integer",
                                "minimum": 0
                            }}
                        }
                    }
                ]
            }
        }
    },

    "definitions": {
        "name": {
            "type": "string",
            "$comment": "hyphen-names with digits, but not in first character",
            "pattern": "^[a-z][a-z0-9]*(-[a-z][a-z0-9]*)*$"
        },
        "argument": {
            "type": "object",
            "$comment": "names are optinally validated here, but the rest",
            "$comment": "is conditional on type, done later.",
            "properties": {
                "type": {"enum": [
                    "channel", "str", "int", "flag", "literal",
                    "space-list", "comma-list", "optional"
                ]},
                "name": {"$ref": "#/definitions/name"}
            },
            "allOf": [
                {
                    "$comment": "container types",
                    "if": {
                        "properties": {"type": {"enum": [
                            "space-list", "comma-list", "optional"
                        ]}}
                    },
                    "then": {
                        "additionalProperties": false,
                        "required": ["type", "inner"],
                        "properties": {
                            "type": {},
                            "name": {},
                            "inner": {"$ref": "#/definitions/argument"}
                        }
                    }
                },
                {
                    "$comment": "simple types",
                    "if": {
                        "properties": {"type": {"enum": [
                            "channel", "str", "int"
                        ]}}
                    },
                    "then": {
                        "additionalProperties": false,
                        "required": ["type"],
                        "properties": {
                            "type": {},
                            "name": {}
                        }
                    }
                },
                {
                    "$comment": "literals must have a string argument",
                    "if": {
                        "properties": {"type": {"const": "literal"}}
                    },
                    "then": {
                        "additionalProperties": false,
                        "required": ["type", "type-argument"],
                        "properties": {
                            "type": {},
                            "name": {},
                            "type-argument": {"type": "string"}
                        }
                    }
                },
                {
                    "$comment": "flags can only have certain arguments",
                    "if": {
                        "properties": {"type": {"const": "flag"}}
                    },
                    "then": {
                        "additionalProperties": false,
                        "required": ["type", "type-argument"],
                        "properties": {
                            "type": {},
                            "name": {},
                            "type-argument": {"enum": ["o"]}
                        }
                    }
                }
            ]
        }
    }
}
